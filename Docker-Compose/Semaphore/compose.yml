services:
    # Database for Semaphore
    postgres:
        container_name: postgres
        restart: unless-stopped
        image: postgres:16.1-alpine3.18
        hostname: postgres
        volumes: 
            - semaphore-postgres:/var/lib/postgresql/data
        environment:
            POSTGRES_USER: semaphore                        # Change this to a secure username
            POSTGRES_PASSWORD: semaphore                    # Change this to a secure password
            POSTGRES_DB: semaphore
        networks:
            - internal

    semaphore:
        container_name: semaphore
        restart: unless-stopped
        image: semaphoreui/semaphore:v2.9.37
        environment:
            SEMAPHORE_DB_USER: semaphore                    # Must match POSTGRES_USER
            SEMAPHORE_DB_PASS: semaphore                    # Must match POSTGRES_PASSWORD
            SEMAPHORE_DB_HOST: postgres
            SEMAPHORE_DB_PORT: 5432
            SEMAPHORE_DB_DIALECT: postgres
            SEMAPHORE_DB: semaphore                         # Must match POSTGRES_DB
            SEMAPHORE_PLAYBOOK_PATH: /tmp/semaphore/
            SEMAPHORE_ADMIN_PASSWORD: changeme              # Change this to your desired admin password
            SEMAPHORE_ADMIN_NAME: admin                     # Change this to your desired admin name
            SEMAPHORE_ADMIN_EMAIL: admin@localhost          # Change this to your desired admin email
            SEMAPHORE_ADMIN: admin                          # Change this to your desired admin username
            SEMAPHORE_ACCESS_KEY_ENCRYPTION: MKBMRtz9qfL0fovQ7T3Nl8V1QTkcdq9VVQKdrsd6LD0=       # Generate a new encryption key with head -c32 /dev/urandom | base64
        # Uncomment the following section if you are using Traefik
        # labels:
        #     - "traefik.enable=true"
        #     - "traefik.docker.network=traefik_network"
        #     - "traefik.http.routers.ansible.entrypoints=websecure"
        #     - "traefik.http.routers.ansible.rule=Host(`ansible-semaphore.leedrisdev.com`)"
        #     - "traefik.http.services.ansible.loadbalancer.server.port=3000"
        #     - "traefik.http.routers.ansible.tls=true"
        #     - "traefik.http.routers.ansible.tls.certresolver=production"
        depends_on:
            - postgres
        # In production, do not expose directly to the internet. Use a reverse proxy like Traefik instead and remove the ports section
        ports:
            - 3000:3000
        networks:
            # - traefik_network # Uncomment this line if you are using Traefik
            - internal

# Comment out the following section if you are not using Traefik
networks:
    # Uncomment the following section if you are using Traefik
    # traefik_network:
    #     external: true
    
    internal:
        driver: bridge

volumes:
    semaphore-postgres:
        driver: local